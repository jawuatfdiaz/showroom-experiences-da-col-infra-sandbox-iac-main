- name: Download Terraform
  get_url:
    url: https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
    dest: /tmp/terraform.zip

- name: Unzip Terraform
  unarchive:
    src: /tmp/terraform.zip
    dest: /usr/local/bin
    remote_src: true

- name: Remove zip file
  file:
    path: /tmp/terraform.zip
    state: absent

- name: Add Terraform to PATH
  lineinfile:
    path: /etc/profile
    line: "export PATH=$PATH:/usr/local/bin"

- name: Terraform init
  command: terraform init
  args:
    chdir: "{{ playbook_dir }}/roles/terraform_template/files/azure-tf"
  environment:
    ARM_CLIENT_ID: "{{ SANDBOX_ARM_CLIENT_ID }}"
    ARM_CLIENT_SECRET: "{{ SANDBOX_ARM_CLIENT_SECRET }}"
    ARM_SUBSCRIPTION_ID: "{{ SANDBOX_ARM_SUBSCRIPTION_ID }}"
    ARM_TENANT_ID: "{{ SANDBOX_ARM_TENANT_ID }}"

- name: Terraform plan
  command: terraform plan
  args:
    chdir: "{{ playbook_dir }}/roles/terraform_template/files/azure-tf"
  environment:
    ARM_CLIENT_ID: "{{ SANDBOX_ARM_CLIENT_ID }}"
    ARM_CLIENT_SECRET: "{{ SANDBOX_ARM_CLIENT_SECRET }}"
    ARM_SUBSCRIPTION_ID: "{{ SANDBOX_ARM_SUBSCRIPTION_ID }}"
    ARM_TENANT_ID: "{{ SANDBOX_ARM_TENANT_ID }}"
  register: terraform_plan

- name: Terraform apply
  command: terraform apply -auto-approve
  args:
    chdir: "{{ playbook_dir }}/roles/terraform_template/files/azure-tf"
  environment:
    ARM_CLIENT_ID: "{{ SANDBOX_ARM_CLIENT_ID }}"
    ARM_CLIENT_SECRET: "{{ SANDBOX_ARM_CLIENT_SECRET }}"
    ARM_SUBSCRIPTION_ID: "{{ SANDBOX_ARM_SUBSCRIPTION_ID }}"
    ARM_TENANT_ID: "{{ SANDBOX_ARM_TENANT_ID }}"

- name: Terraform output
  command: terraform output -json
  args:
    chdir: "{{ playbook_dir }}/roles/terraform_template/files/azure-tf"
  environment:
    ARM_CLIENT_ID: "{{ SANDBOX_ARM_CLIENT_ID }}"
    ARM_CLIENT_SECRET: "{{ SANDBOX_ARM_CLIENT_SECRET }}"
    ARM_SUBSCRIPTION_ID: "{{ SANDBOX_ARM_SUBSCRIPTION_ID }}"
    ARM_TENANT_ID: "{{ SANDBOX_ARM_TENANT_ID }}"
  register: terraform_output

- name: Create key-value JSON object
  set_fact:
    terraform_output_json: "{{ terraform_output.stdout | from_json }}"

- name: Notify TF events
  uri:
    url: "{{ NOTIFICATION_URL }}/api/provisioning/deployment/{{ DEPLOYMENT_REQUEST_ID }}"
    method: PATCH
    status_code: [200, 201]
    body_format: json
    headers:
      Authorization: "{{ SETUP_NOTIFICATION_PARAM_CODE }}"
    body:
      status: "DEPLOYING"
      outputs: >
        [{% for key, value in terraform_output_json.items() -%}
          {
            "key": "{{ key }}",
            "value": {{ value.value | to_json }},
            "type": "STRING"
          }{%- if not loop.last %},{%- endif %}
        {%- endfor %}]

  ignore_errors: yes
  register: notify_events

- name: Debug notify events if failed
  debug:
    var: notify_events.json
  when: notify_events is failed